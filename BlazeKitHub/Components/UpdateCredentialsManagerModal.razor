@using System.Text.Json;

<div>
    <EditForm Model="_form" OnSubmit="SubmitForm">

        <div class="form-row">
            <div class="form-group col-5">
                <label>Carrier Name</label>
                <InputText class="form-control" placeholder="Spotify API" @bind-Value="nameString" />
            </div>

            <div class="form-group col-4">
                <label>Integration Name</label>
                <InputText class="form-control" placeholder="spotify" @bind-Value="integrationNameString" />
            </div>

            <div class="form-group col-3">
                <label>Country of origin</label>
                <InputText class="form-control" placeholder="US" @bind-Value="originCountryString" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-6">
                <label>Dev environment username</label>
                <InputText class="form-control" placeholder="spotify_us@test.com" @bind-Value="devUnString" />
            </div>

            <div class="form-group col-6">
                <label for="name">Dev environment password</label>
                <InputText class="form-control" placeholder="creat!veW0rks" @bind-Value="devPwString" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-6">
                <label>Staging environment username</label>
                <InputText class="form-control" placeholder="spotify_us@test.com" @bind-Value="stagingUnString" />
            </div>

            <div class="form-group col-6">
                <label>Staging environment password</label>
                <InputText class="form-control" placeholder="creat!veW0rks" @bind-Value="staginPwString" />
            </div>
        </div>

        <div class="modal-footer">
            <MudButton Variant="Variant.Filled" id="register-submit" Color="Color.Primary" ButtonType="ButtonType.Submit">Update Credentials</MudButton>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public string? name { get; set; }
    [Parameter] public string? integrationName { get; set; }
    [Parameter] public string? originCountry { get; set; }
    [Parameter] public string? devUsername { get; set; }
    [Parameter] public string? devPassword { get; set; }
    [Parameter] public string? stagingUsername { get; set; }
    [Parameter] public string? stagingPassword { get; set; }

    UpdateCredentialsForm _form = new();

    private string nameString, devUnString, devPwString, stagingUnString, staginPwString, integrationNameString, originCountryString;

    protected override void OnInitialized()
    {
        nameString = name;
        devUnString = devUsername;
        devPwString = devPassword;
        stagingUnString = stagingUsername;
        staginPwString = stagingPassword;
        integrationNameString = integrationName;
        originCountryString = originCountry;

        BlazoredModal.SetTitle("Update Credentials");
    }

    private async Task SubmitForm()
    {
        _form.Name = nameString;
        _form.DevUsername = devUnString;
        _form.DevPassword = devPwString;
        _form.StagingUsername = stagingUnString;
        _form.StagingPassword = staginPwString;
        _form.IntegrationName = integrationNameString;
        _form.OriginCountry = originCountryString;

        await BlazoredModal.CloseAsync(ModalResult.Ok(_form));
    }

    public class UpdateCredentialsForm
    {
        public string? Name { get; set; }

        public string? DevUsername { get; set; }

        public string? DevPassword { get; set; }

        public string? StagingUsername { get; set; }

        public string? StagingPassword { get; set; }

        public string? IntegrationName { get; set; }

        public string? OriginCountry { get; set; }
    }
}