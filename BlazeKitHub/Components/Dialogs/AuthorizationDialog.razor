@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Authorization
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="auth-form" Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudTextField Label="Username" @bind-Value="model.Username" />
            <MudTextField Label="Password" Class="mt-3" @bind-Value="model.Password" InputType="InputType.Password" />
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButtonGroup Variant="Variant.Outlined">
            <MudButton OnClick="Close" Color="Color.Surface">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" form="auth-form">Continue</MudButton>
        </MudButtonGroup>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public AuthorizationForm model = new AuthorizationForm();

    [Parameter] public bool ShowSnackBar { get; set; } = true;

    [Parameter] public string? SnackBarText { get; set; } = "Authorized";

    public class AuthorizationForm
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(8, ErrorMessage = "Username length can't be more than 8.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(30, ErrorMessage = "Password must be at least 2 characters long.", MinimumLength = 2)]
        public string? Password { get; set; }
    }

    private void Close() => MudDialog.Close(DialogResult.Cancel());

    private void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
        Snackbar.Add(SnackBarText, Severity.Success);
        MudDialog.Close(DialogResult.Ok(model));
    }
}
