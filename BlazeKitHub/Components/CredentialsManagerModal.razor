@using System.ComponentModel.DataAnnotations
@using System.Text.Json;

<div>
    <EditForm Model="_form" OnValidSubmit="SubmitForm" Context="context">
        <DataAnnotationsValidator />

        <div class="form-row">
            <div class="form-group col-5">
                <label>Carrier Name</label>
                <InputText class="form-control" placeholder="Spotify API" @bind-Value="_form.Name" />
                <ValidationMessage For="@(() => _form.Name)" />
            </div>

            <div class="form-group col-4">
                <label>Integration Name</label>
                <InputText class="form-control" placeholder="spotify" @bind-Value="_form.IntegrationName" />
                <ValidationMessage For="@(() => _form.IntegrationName)" />
            </div>

            <div class="form-group col-3">
                <label>Country of origin</label>
                <InputText class="form-control" placeholder="US" @bind-Value="_form.OriginCountry" />
                <ValidationMessage For="@(() => _form.OriginCountry)" />
            </div>
        </div>             

        <div class="form-row">
            <div class="form-group col-6">
                <label>Dev environment username</label>
                <InputText class="form-control" placeholder="spotify_us@test.com" @bind-Value="_form.DevUsername" />
                <ValidationMessage For="@(() => _form.DevUsername)" />
            </div>
             
            <div class="form-group col-6">
                <label for="name">Dev environment password</label>
                <InputText class="form-control" placeholder="creat!veW0rks" @bind-Value="_form.DevPassword" />
                <ValidationMessage For="@(() => _form.DevPassword)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-6">
                <label>Staging environment username</label>
                <InputText class="form-control" placeholder="spotify_us@test.com" @bind-Value="_form.StagingUsername" />
                <ValidationMessage For="@(() => _form.StagingUsername)" />
            </div>

            <div class="form-group col-6">
                <label>Staging environment password</label>
                <InputText class="form-control" placeholder="creat!veW0rks" @bind-Value="_form.StagingPassword" />
                <ValidationMessage For="@(() => _form.StagingPassword)" />
            </div>
        </div>

        <div class="modal-footer">
            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Secondary" OnClick="SubmitForm" Disabled="@(!context.IsModified() || !context.Validate())" id="register-submit">Add Credentials</MudButton>
        </div>
    </EditForm>
</div>

@code {
    private readonly AddCredentialsForm _form = new();
    private EditContext context;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override void OnInitialized() => BlazoredModal.SetTitle("New Credentials");

    private async Task SubmitForm()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(_form));
    }

    public class AddCredentialsForm
    {
        [Required(ErrorMessage = "Please provide account country.")]
        public string? OriginCountry { get; set; }

        [Required(ErrorMessage = "Please provide integration name.")]
        public string? IntegrationName { get; set; }

        [Required(ErrorMessage = "Please enter carrier name.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Please enter username for Dev environment.")]
        public string? DevUsername { get; set; }

        [Required(ErrorMessage = "Please enter password for Dev environment.")]
        public string? DevPassword { get; set; }

        public string? StagingUsername { get; set; }

        public string? StagingPassword { get; set; }
    }
}