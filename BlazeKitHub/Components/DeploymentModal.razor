@using System.ComponentModel.DataAnnotations

<div>
    <EditForm Model="_form" OnValidSubmit="SubmitForm">
          <DataAnnotationsValidator />
        <div class="form-group">
            <label for="name">Username</label>
            <InputText class="form-control" placeholder="Enter Username" @bind-Value="_form.Username" />
            <ValidationMessage For="@(() => _form.Username)" />
        </div>
        <div class="form-group">
            <label for="name">Password</label>
            <InputText type="password" class="form-control" placeholder="Enter Password" @bind-Value="_form.Password" />
            <ValidationMessage For="@(() => _form.Password)" />
        </div>
         <div class="form-group">
            <label for="name">Name</label>
            <InputText class="form-control" placeholder="Enter name of instance" @bind-Value="_form.Name" />
            <ValidationMessage For="@(() => _form.Name)" />
        </div>
        
        <div class="form-group">
            <label for="team">Team</label>
            <select class="form-control"  @bind="_form.Team">
                <option value="">Select Team ..</option>
                @foreach (var team in TEAMS)
                {
                    <option value=@team>@team</option>
                }
            </select>
            <ValidationMessage For="@(() => _form.Team)" />
        </div>
        <div class="form-group">
            <label for="path">Path</label>
            <InputText class="form-control" placeholder="Enter Path" @bind-Value="_form.Path" />
            <ValidationMessage For="@(() => _form.Path)" />
        </div>
        <div class="form-group">
            <InputCheckbox @bind-Value=@_form.LogRequest />
            <label for="name">Generate API log files separately</label>
        </div>
        <div class="modal-footer">
            <button id="register-submit" class="btn btn-dark" type="submit" @onclick="RegisterAndStart">Register and start</button>
            <button id="register-submit" class="btn btn-success" type="submit">Register Only</button>
        </div>
    </EditForm>
</div>
@code {
    private readonly CreateDeploymentForm _form = new();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    protected override void OnInitialized() => BlazoredModal.SetTitle("New Deployment");
    private async Task SubmitForm() => await BlazoredModal.CloseAsync(ModalResult.Ok(_form));
    private async Task RegisterAndStart() => await BlazoredModal.CloseAsync(ModalResult.Cancel(_form));
    private string[] TEAMS = { "Mustangs", "Sherlock", "DareDevil", "Cyborg", "Flash", "Falcons", "Elite", "Ingenious", "Maverick", "Sigma" };

    public class CreateDeploymentForm
    {
        [Required(ErrorMessage = "Please enter {0}.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Please enter {0}.")]
        public string? Path { get; set; }

        [Required(ErrorMessage = "Please select {0}.")]
        public string? Team { get; set; }

        [Required(ErrorMessage = "Please enter {0}.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Please enter {0}.")]
        public string? Password { get; set; }

        public bool LogRequest { get; set; }
    }

}