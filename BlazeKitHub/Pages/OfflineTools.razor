@page "/offline-tools"
@inject HttpClient Http
@inject IJSRuntime JS
@inject IConfiguration Configuration

<PageTitle>Offline Tools</PageTitle>

@if (tools != null)
{
    <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Secondary" AlwaysShowScrollButtons TabPanelClass="capitalize-text">
         @foreach (var tool in tools)
        {
            <MudTabPanel Text=@tool.title>
                <DownloadTool DownloadUrl=@tool.downloadUrl LastUpdateUrl=@tool.lastUpdatedUrl ToolName=@tool.title>
                    <ChildContent>
                        <MudText Typo="Typo.h5">@tool.title</MudText>

                            <p>
                                @tool.description
                        </p>
                        @if (!string.IsNullOrWhiteSpace(@tool?.howTo))
                        {
                            <MudText Typo="Typo.h6">How to use</MudText>

                            <MudTimeline TimelinePosition="TimelinePosition.Start">
                                @foreach (var str in @tool?.howTo?.Split("<br>"))
                                {
                                    @if (!string.IsNullOrWhiteSpace(str))
                                    {
                                        <MudTimelineItem Color="Color.Primary" Size="Size.Small"><MudText>@str</MudText></MudTimelineItem>
                                    }
                                }
                            </MudTimeline>
                        }
                    </ChildContent>
                </DownloadTool>
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    private string? BASE_URL;
    private ToolDetail[]? tools;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
            tools = await Http.GetFromJsonAsync<ToolDetail[]>(BASE_URL + "/tool/details");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "An error occurred", e.Message);
        }
    }

    public class ToolDetail
    {
        public string? title { get; set; }
        public string? description { get; set; }
        public string? howTo { get; set; }
        public string? lastUpdatedUrl { get; set; }
        public string? downloadUrl { get; set; }
    }
}