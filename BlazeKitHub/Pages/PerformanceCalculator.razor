@page "/performance-calculator"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inject IConfiguration Configuration

<PageTitle>Performance Calculator</PageTitle>

<br>

<div class="modal-body">
    <form method="dialog">
        <div class="form-group">
            <label for="Request">Request</label>
            <textarea class="form-control" style="height: 100px; resize: none;" placeholder="Enter request" @bind="request"></textarea>
        </div>
        <div class="form-group">
            <label for="Scenarios">Scenario(s)</label>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Enter scenario" @bind="scenario" />
                <div style="display: flex;">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>AddToList(addedScenarios,scenario))" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="Endpoints">Endpoint(s)</label>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Enter endpoint" @bind="endpoint" />
                <div style="display: flex;">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>AddToList(addedEndpoints, endpoint))" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="IterationsCount">Iterations Count</label>
            <input type="number" class="form-control" placeholder="Enter the iterations count" @bind="perfRequest.IterationsCount" />
        </div>
        @if (addedScenarios.Any())
        {
            <div class="form-group">
                <b>Added scenarios</b>
                <ul>
                    @foreach (var value in addedScenarios.ToArray())
                    {
                        <li style="list-style-type: none;">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" Style="margin-right: 5px;" OnClick="@(()=>RemoveFromList(addedScenarios, value))" />@value
                        </li>
                    }
                </ul>
            </div>
        }
        @if (addedEndpoints.Any())
        {
            <div class="form-group">
                <b>Added endpoints</b>
                <ul>
                    @foreach (var point in addedEndpoints.ToArray())
                    {
                        <li style="list-style-type: none;">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" Style="margin-right: 5px;" OnClick="@(()=>RemoveFromList(addedEndpoints, point))" />@point
                        </li>
                    }
                </ul>
            </div>
        }
        <div class="form-group">
            <label for="Response">Response</label>
            <textarea class="form-control" style="height: 100px; resize: none;" readonly @bind="response"></textarea>
        </div>
        <div class="modal-footer">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnInitializedAsync" Class="mr-2">Clear All</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CheckPerformance">Test</MudButton>
        </div>
    </form>
</div>

@code {
    private PerformanceRequest perfRequest = new();
    private List<string> addedEndpoints = new();
    private List<string> addedScenarios = new();
    private string? endpoint, scenario, request, response, BASE_URL, serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            request = string.Empty;
            response = string.Empty;
            endpoint = string.Empty;
            scenario = string.Empty;
            addedEndpoints = new();
            addedScenarios = new();
            perfRequest.IterationsCount = 0;

            BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
            serviceEndpoint = BASE_URL + "/perf/test";
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "An error occurred", e.Message);
        }
    }

    #region Performance API UI

    private async Task CheckPerformance()
    {
        try
        {
            response = string.Empty;
            string[] addedScen = addedScenarios.ToArray();
            string[] addedEndp = addedEndpoints.ToArray();

            JObject json = JObject.Parse(request);
            perfRequest.Request = json;
            perfRequest.Scenarios = new Scenario[addedScen.Length];
            perfRequest.Endpoints = new Endpoints[addedEndp.Length];


            for (int i = 0; i < addedScen.Length; i++)
            {
                perfRequest.Scenarios[i] = new Scenario() { Regex = addedScen[i] };
            }
            for (int i = 0; i < addedEndp.Length; i++)
            {
                var urlObject = new Endpoint() { Url = addedEndp[i] };
                perfRequest.Endpoints[i] = new Endpoints() { Endpoint = urlObject };
            }
            var res = await Http.PostAsJsonAsync(serviceEndpoint, perfRequest);

            if (res.IsSuccessStatusCode)
            {
                var data = await res.Content.ReadFromJsonAsync<JsonElement>();
                response = JsonPrettify(data.ToString());
                StateHasChanged();
            }
            else
            {
                response = $"Error received from server: {res.ReasonPhrase}";
            }

        }
        catch (Exception e)
        {
            response = e.Message;
            StateHasChanged();
        }
    }

    private async void AddToList(List<string> list, string val)
    {
        try
        {
            if (!string.IsNullOrEmpty(val) && !list.Contains(val))
            {
                list.Add(val);
                if (endpoint.Equals(val))
                {
                    endpoint = string.Empty;
                }
                else
                {
                    scenario = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unexpected error", ex.Message);
        }
    }

    private async void RemoveFromList(List<string> list, string val)
    {
        try
        {
            if (!string.IsNullOrEmpty(val) && list.Contains(val))
            {
                list.Remove(val);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unexpected error", ex.Message);
        }
    }

    public string JsonPrettify(string json)
    {
        using (var stringReader = new StringReader(json))
        using (var stringWriter = new StringWriter())
        {
            var jsonReader = new JsonTextReader(stringReader);
            var jsonWriter = new JsonTextWriter(stringWriter) { Formatting = Formatting.Indented };
            jsonWriter.WriteToken(jsonReader);
            return stringWriter.ToString();
        }
    }

    private async void ShowMsg()
    {
        await JS.InvokeVoidAsync("errorModal", "Tool unavailable", "This tool is not available for use yet.");
    }

    public class PerformanceRequest
    {
        public Object? Request { get; set; }
        public Scenario[]? Scenarios { get; set; }
        public int? IterationsCount { get; set; }
        public Endpoints[]? Endpoints { get; set; }
    }
    public class Endpoints
    {
        public Endpoint? Endpoint { get; set; }
    }
    public class Endpoint
    {
        public string? Url { get; set; }
    }
    public class Scenario
    {
        public string? Regex { get; set; }
    }
    #endregion
}
