@page "/links"
@inject IJSRuntime JS
@inject HttpClient Http
@inject IConfiguration Configuration
@using BlazeKitHub.Helpers

<PageTitle>Useful Links</PageTitle>

<h3>Useful Links</h3>

<div class="form-row">
    <div class="form-group col-md-6">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(() => ShowAddLinkModal())">Add New</MudButton>
    </div>
</div>

<MudTable Loading="@(linkInfo == null)" LoadingProgressColor="Color.Info" Items="@linkInfo" Dense="true" Hover="true" Bordered="true" Striped="false" Filter="new Func<LinkInfo,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Useful Links</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LinkInfo, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<LinkInfo, object>(x=>x.Details)">Details</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name" Style="text-align:left!important"><MudLink Href="@context.Url" target="_blank">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Details" Style="text-align:left!important">@context.Details</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string BASE_URL;
    private string searchString1 = "";
    private LinkInfo[]? linkInfo;    
    private LinkInfo selectedItem1 = null;
    private HashSet<LinkInfo> selectedItems = new HashSet<LinkInfo>();

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
            await GetUsefulLinks();
            await JS.InvokeVoidAsync("dataTable", "deploymentTable");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "Request failed", e.Message);
        }
    }

    private async void AddLink(LinkInfo linkData)
    {
        var endpoint = BASE_URL + "/useful-links";

        try
        {
            var client = new HttpClient();
            var response = await client.PostAsJsonAsync(endpoint, linkData);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("successMessageModal", "Link added!");
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetUsefulLinks();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to add link.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to add link.", ex.Message);
        }
    }
    private async Task GetUsefulLinks()
    {
        linkInfo = await Http.GetFromJsonAsync<LinkInfo[]>(BASE_URL + "/useful-links");
    }
    private async Task ShowAddLinkModal()
    {
        var credentialsModal = Modal.Show<AddLinkModal>
            ("Add Link", new ModalOptions()
                {
                    HideCloseButton = false,
                    HideHeader = false,
                    DisableBackgroundCancel = true,
                    ActivateFocusTrap = false,
                    Position = ModalPosition.Middle
                });

        var result = await credentialsModal.Result;

        try
        {
            var newCredential = new LinkInfo();
            dynamic _modalData = result?.Data;

            if (_modalData != null)
            {
                newCredential.Name = _modalData.Name;
                newCredential.Url = _modalData.Url;
                newCredential.Details = _modalData.Description;

                if (result != null && result.Confirmed)
                {
                    AddLink(newCredential);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Error!", ex.Message);
        }
        finally
        {
            credentialsModal.Close();
        }
    }
    
    private bool FilterFunc1(LinkInfo element) => FilterFunc(element, searchString1);
    private bool FilterFunc(LinkInfo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Details.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Url.Contains(searchString))
            return true;
        return false;
    }
}