@page "/deployments"
@using System.Text
@using System.ComponentModel.DataAnnotations
@using BlazeKitHub.Components.Dialogs
@using BlazeKitHub.Services
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Threading;
@using static BlazeKitHub.Components.Dialogs.AuthorizationDialog

@inject IConfiguration Configuration
@inject NavigationManager uriHelper;
@inject HttpClient Http
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject IErrorDialogService ErrorDialogService

<PageTitle>Deployments</PageTitle>

<h3>Deployments</h3>
<div class="form-row">
    <div class="form-group col-md-6">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowAddDeploymentModal())">Add New Deployment</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(e => ShowAuthenticationModal("", "start-multiple"))">Start Multiple Instance</MudButton>
    </div>
</div>

<MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudText>Selected items (@selectedItems?.Count)</MudText>
    <div>
        <MudTable Loading="@(deployments == null)" LoadingProgressColor="Color.Info" @ref="_table" T="Deployment" Items="@deployments" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true"
                  Dense="true" Striped="true" Filter="new Func<Deployment,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Deployments</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Path</MudTh>
                <MudTh>Team</MudTh>
                <MudTh>Split Logs</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    <MudLink href=@(BASE_URL + context?.Name) target=”_blank” title="@(BASE_URL + context?.Name)">
                        @context?.Name
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Status">
                <MudIcon Title="@DeploymentStatus(context.LogRequest)"
                         Icon="@(IsDeploymentRunning(context.Status) ? Icons.Material.Rounded.CheckCircle : Icons.Material.Rounded.ErrorOutline)"
                         Color="(IsDeploymentRunning(context.Status) ? Color.Success : Color.Error)" />
            </MudTd>
            <MudTd DataLabel="Path">@context.Path</MudTd>
                <MudTd DataLabel="Team">@context.Team</MudTd>
                <MudTd DataLabel="Split Logs">
                    <MudIcon Title="@LogRequestTitle(context.LogRequest)"
                             Icon="@(LogRequestEnabled(context.LogRequest) ? Icons.Material.Rounded.CheckCircle : Icons.Material.Rounded.ErrorOutline)"
                             Color="(LogRequestEnabled(context.LogRequest) ? Color.Success : Color.Error)" />
                </MudTd>
                <MudTd>
                    <MudButtonGroup Variant="Variant.Filled">
                        <MudIconButton Title="Refresh"
                                       Icon="@Icons.Material.Filled.Refresh"
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       Disabled="IsDeploymentRunning(context.Status)"
                                       OnClick="@(() => ShowAuthenticationModal(context?.Name, "refresh"))" />

                        <MudIconButton Title="Get Updated Info"
                                       Icon="@Icons.Material.Filled.Update"
                                       Color="Color.Dark"
                                       Size="Size.Small"
                                       Disabled="IsDeploymentRunning(context.Status)"
                                       OnClick="@(() => ShowAuthenticationModal(context?.Name, "refresh"))" />

                        <MudIconButton Title="@(IsDeploymentRunning(context.Status) ? AlreadyStarted : StartDeployment)"
                                       Icon="@Icons.Material.Filled.Start"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       Disabled="IsDeploymentRunning(context.Status)"
                                       OnClick="@(() => ShowAuthenticationModal(context?.Name, "start"))" />

                        <MudIconButton Title="Stop"
                                       Icon="@Icons.Material.Filled.Stop"
                                       Color="Color.Secondary"
                                       Size="Size.Small"
                                       Disabled="!IsDeploymentRunning(context.Status)"
                                       OnClick="@(() => ShowAuthenticationModal(context?.Name, "stop"))" />


                        <MudIconButton Title="Delete"
                                       Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       Disabled="IsDeploymentRunning(context.Status)"
                                       OnClick="@(() => DeleteDeployment(context))" />
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>

    @code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private const string SampleDataFlagKey = "sample-data";
    private const string AlreadyStarted = "Already running";
    private const string StartDeployment = "Start";
    private string? BASE_URL;
    private string filter = string.Empty;
    private string searchString1 = string.Empty;
    private bool isVisible;
    private MudTable<Deployment>? _table;
    private Deployment? selectedItem1;
    private HashSet<Deployment> selectedItems = new HashSet<Deployment>();
    private List<Deployment>? deployments;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Info();
            await JS.InvokeVoidAsync("dataTable");

        }
        catch (HttpRequestException httpEx)
        {
            if (httpEx.StatusCode.HasValue)
            {
                await JS.InvokeVoidAsync("errorModal", "Request failed!", $"Request failed. Error status code: {(int)httpEx.StatusCode}");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Request failed!", httpEx.Message);
            }
        }
    }

    /// <summary>
    /// Get Information related to all deployments on server
    /// </summary>
    /// <returns></returns>
    private async Task Info()
    {
        try
        {
            BASE_URL = Configuration.GetSection("urls")["DeploymentApi"];

            bool showSampleData = Convert.ToBoolean(Configuration.GetSection(SampleDataFlagKey).Value);

            if (showSampleData)
            {
                deployments = await Http.GetFromJsonAsync<List<Deployment>>("sample-data.json");
            }
            else
            {
                deployments = await Http.GetFromJsonAsync<List<Deployment>>(BASE_URL + "info");
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Fetching Error!", ex.Message);
        }
    }

    private string[] GetDeploymentNames(string[] deploymentNames)
    {
        for (var i = 0; i < selectedItems.Count; i++)
        {
            deploymentNames[i] = selectedItems.ElementAt(i).Name;
        }
        deploymentNames = deploymentNames.Where(c => c != null).ToArray();

        return deploymentNames;

    }

    private async Task DeleteDeployment(Deployment deployment)
    {
        var dialog = await DialogService.ShowAsync<AuthorizationDialog>("Authorization");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = (AuthorizationForm)result.Data;

            if (data != null)
            {
                UnRegister(deployment.Name ?? string.Empty, $"{data.Username}:{data.Password}");
            }
        }
    }

    private async Task ShowAuthenticationModal(string? deploymentName, string methodName)
    {
        if (deployments != null)
        {
            string[] deploymentNames = new string[deployments.Count];
            deploymentNames = GetDeploymentNames(deploymentNames);
            var isStartMultiple = methodName == "start-multiple" ? true : false;

            if (isStartMultiple)
            {
                deploymentNames = GetDeploymentNames(deploymentNames);
            }
            if (deploymentNames.Length == 0 && isStartMultiple)
            {
                await JS.InvokeVoidAsync("errorModal", "Warning!", "Please select instance(s) to be started.");
            }
            else
            {
                var deploymentModal = Modal.Show<AuthModal>("Authorization");
                var result = await deploymentModal.Result;

                try
                {
                    if (result.Confirmed)
                    {
                        var obj = new AuthenticationForm();
                        dynamic _message = result?.Data != null ? result.Data : obj;
                        var credentials = $"{_message?.Username}:{_message?.Password}";

                        isVisible = true;
                        if (methodName == "start")
                        {
                            await Start(deploymentName ?? "", credentials, true, false);
                        }
                        else if (methodName == "stop")
                        {
                            await Stop(deploymentName ?? "", credentials, false);
                        }
                        else if (isStartMultiple)
                        {
                            StartMultiple(deploymentNames, credentials);
                        }
                        else if (methodName == "unregister")
                        {
                            UnRegister(deploymentName ?? "", credentials);
                        }
                        else if (methodName == "refresh")
                        {
                            await RefreshInstance(deploymentName ?? "", credentials);
                        }
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("errorModal", "Authorization Error!", ex.Message);
                }
                finally
                {
                    deploymentModal = null;
                    result = null;
                    isVisible = false;
                    StateHasChanged();
                }
            }
        }
        else
        {
            await JS.InvokeVoidAsync("errorModal", "Instance Not Found!", "Instance not found.");
        }
    }

    private async Task ShowAddDeploymentModal()
    {
        var deploymentModal = Modal.Show<DeploymentModal>("Add Deployment");
        var result = await deploymentModal.Result;

        try
        {
            if (result != null)
            {
                dynamic? _message = result.Data;

                if (_message != null)
                {
                    var newDeployment = new Deployment();
                    newDeployment.Name = _message.Name;
                    newDeployment.Status = string.Empty;
                    newDeployment.Port = 80;
                    newDeployment.Path = GetFormattedPath(_message.Path);
                    newDeployment.Team = _message.Team;
                    newDeployment.LogRequest = _message.LogRequest;

                    var credentials = $"{_message.Username}:{_message.Password}";

                    if (result.Confirmed)
                    {
                        Register(newDeployment, credentials, false);
                    }
                    else
                    {
                        Register(newDeployment, credentials, true);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Authorization Error!", ex.Message);
        }
        finally
        {
            deploymentModal.Close();
        }
    }

    private string GetFormattedPath(string path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            if (path.Contains("\\\\\\"))
            {
                path = path.Replace("\\\\", "\\");
            }
            return path;
        }
        return string.Empty;
    }

    private async Task RefreshInstance(string deploymentName, string credentials)
    {
        try
        {
            var endpoint = BASE_URL + deploymentName + "/stop";
            var index = GetDeploymentNameIndex(deploymentName);
            await Stop(deploymentName, credentials, true);
            await Start(deploymentName, credentials, true, true);
            await JS.InvokeVoidAsync("successModal", "Refreshed");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Instance cannot Refreshed!", ex.Message);
        }
    }

    private async Task ModuleInfo(string? deploymentName)
    {
        var endpoint = BASE_URL + deploymentName + "/info";
        Deployment[]? newDeployment;
        try
        {
            newDeployment = await Http.GetFromJsonAsync<Deployment[]>(endpoint);

            for (var i = 0; i < deployments?.Count; i++)
            {
                if (deployments[i]?.Name == deploymentName && newDeployment != null)
                {
                    deployments[i] = newDeployment[0];
                    break;
                }
            }
            await JS.InvokeVoidAsync("successModal", "Updated");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Instance Info!", ex.Message);
        }
    }

    private int GetDeploymentNameIndex(string deploymentName)
    {
        var deploymentNameIndex = -1;

        for (var i = 0; i < deployments?.Count; i++)
        {
            if (deployments[i]?.Name?.ToLower() == deploymentName?.ToLower())
            {
                deploymentNameIndex = i;
                break;
            }
        }

        return deploymentNameIndex;
    }

    private async Task Start(string deploymentName, string credentials, bool IsStartOnly, bool isRefresh)
    {
        try
        {
            var endpoint = BASE_URL + deploymentName + "/start";
            await Info();
            var index = GetDeploymentNameIndex(deploymentName);

            if (deployments?.Count > 0 && index >= 0)
            {
                var client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
                ("Basic", ConvertToBase64String(credentials));
                await JS.InvokeVoidAsync("showLoader");
                var response = await client.PostAsJsonAsync(endpoint, deployments[index]);
                var responseString = await response.Content.ReadAsStringAsync();
                var responseMessage = GetResponseMessage(responseString).ToLower();
                await JS.InvokeVoidAsync("hideLoader");

                if (response.IsSuccessStatusCode && responseMessage.Contains("module started at port"))
                {
                    if (!isRefresh)
                    {
                        if (IsStartOnly)
                        {
                            await JS.InvokeVoidAsync("successModal", "Started");
                            await Info();
                            StateHasChanged();
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("successModal", "Registered and Started");
                            await JS.InvokeVoidAsync("destroyDataTable"); ;
                            await Info();
                            await JS.InvokeVoidAsync("dataTable");
                            StateHasChanged();
                        }
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("errorModal", "Instance not started!", responseMessage);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("hideLoader");
            await JS.InvokeVoidAsync("errorModal", "Instance not started!", ex.Message);

        }
    }

    private string GetResponseMessage(string responseString)
    {
        if (!string.IsNullOrWhiteSpace(responseString))
        {
            var jsonObj = JsonConvert.DeserializeObject<ResponseMessage>
                (responseString);
            return jsonObj?.message ?? "";
        }
        return "";
    }

    private async void StartMultiple(string[] DeploymentNames, string credentials)
    {
        try
        {
            var endpoint = BASE_URL + "start-multiple";

            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
            ("Basic", ConvertToBase64String(credentials));
            var response = await client.PostAsJsonAsync(endpoint, DeploymentNames);
            var responseString = await response.Content.ReadAsStringAsync();
            var responseMessage = GetResponseMessage(responseString);

            if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(responseMessage) && responseMessage == "starting modules list...")
            {
                await JS.InvokeVoidAsync("successModal", "Started", selectedItems.Count);
                await Info();
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Instance not started!", responseMessage);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Instance not started", ex.Message);
        }
    }

    private async Task Stop(string deploymentName, string credentials, bool isRefresh)
    {
        var endpoint = BASE_URL + deploymentName + "/stop";
        var index = GetDeploymentNameIndex(deploymentName);

        if (deployments?.Count > 0 && index >= 0)
        {
            try
            {
                var client = new HttpClient();

                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
                ("Basic", ConvertToBase64String(credentials));
                var response = await client.PostAsJsonAsync(endpoint, deployments[index]);
                var responseString = await response.Content.ReadAsStringAsync();
                var responseMessage = GetResponseMessage(responseString);

                if (!isRefresh)
                {
                    if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(responseMessage) && responseMessage == "stopping process...")
                    {
                        await JS.InvokeVoidAsync("successModal", "Stopped");
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("errorModal", "Instance not stopped!", responseMessage);
                    }
                }
                await Info();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("errorModal", "Instance not stopped!", ex.Message);
            }
        }

    }

    private static string ConvertToBase64String(string credentials)
    {
        var byteArray = Encoding.ASCII.GetBytes(credentials);
        return Convert.ToBase64String(byteArray);
    }

    private async void Register(Deployment deployment, string credentials, bool isRegisterStart)
    {
        var endpoint = BASE_URL + "register";

        try
        {
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
            ("Basic", ConvertToBase64String(credentials));
            var response = await client.PostAsJsonAsync(endpoint, deployment);
            var responseString = await response.Content.ReadAsStringAsync();
            var responseMessage = GetResponseMessage(responseString);

            if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(responseMessage) && responseMessage.ToLower().Contains("registered at path:"))
            {
                if (isRegisterStart)
                {
                    await Start(deployment.Name ?? "", credentials, false, false);
                }
                else
                {
                    await JS.InvokeVoidAsync("successModal", "Registered");
                    await JS.InvokeVoidAsync("destroyDataTable");
                    await Info();
                    StateHasChanged();
                    await JS.InvokeVoidAsync("dataTable");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Instance not registered!", responseMessage);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Instance not registered!", ex.Message);
        }
    }

    private async void UnRegister(string deploymentName, string credentials)
    {
        var endpoint = BASE_URL + "unregister";

        try
        {
            isVisible = true;

            UnregisterDeployment dep = new UnregisterDeployment();
            dep.Name = deploymentName;
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
            ("Basic", ConvertToBase64String(credentials));

            var response = await client.PostAsJsonAsync(endpoint, dep);
            var responseString = await response.Content.ReadAsStringAsync();
            var responseMessage = GetResponseMessage(responseString)?.ToLower();

            if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(responseMessage) && responseMessage.Contains("unregistered"))
            {
                await JS.InvokeVoidAsync("destroyDataTable");
                await Info();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
                await JS.InvokeVoidAsync("successModal", "Removed");
            }
            else
            {
                await ErrorDialogService.ShowErrorDialog("Instance not removed!", responseMessage);
            }
        }
        catch (Exception ex)
        {
            await ErrorDialogService.ShowErrorDialog("Instance not removed!", ex.Message);
        }
        finally
        {
            isVisible = false;
            StateHasChanged();
        }
    }

    private void NavigateToUrl(string url)
    {
        uriHelper.NavigateTo(url, true);
    }

    private bool IsDeploymentRunning(string deploymentStatus)
    {
        return deploymentStatus == "started";
    }
    private string DeploymentStatus(string deploymentStatus)
    {
        return deploymentStatus == "started" ? "Active" : "Inactive";
    }
    private bool LogRequestEnabled(dynamic flag)
    {
        return flag?.ToString()?.ToLower() == "true";
    }
    private string LogRequestTitle(dynamic flag)
    {
        return LogRequestEnabled(flag) ? "Logging Enabled" : "Logging Disabled";
    }

    private bool FilterFunc1(Deployment element) => FilterFunc(element, searchString1);
    private bool FilterFunc(Deployment element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Path.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Team.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public class Deployment
    {
        public string? Name { get; set; }

        public string? Status { get; set; }

        public int? Port { get; set; }

        public string? Path { get; set; }

        public string? Team { get; set; }

        public dynamic? LogRequest { get; set; }
    }

    public class UnregisterDeployment
    {
        public string? Name { get; set; }
    }

    public class ResponseMessage
    {
        public string? message { get; set; }
    }

    public class AuthenticationForm
    {
        [Required(ErrorMessage = "Please enter {0}.")]
        public string? Username { get; set; }
        [Required(ErrorMessage = "Please enter {0}.")]
        public string? Password { get; set; }
    }
}