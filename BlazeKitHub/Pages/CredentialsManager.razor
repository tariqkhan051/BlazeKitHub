@page "/credentials-manager"
@inject IJSRuntime JS
@inject HttpClient Http
@inject IConfiguration Configuration
@using BlazeKitHub.Helpers

<PageTitle>Credentials Manager</PageTitle>

<h3>Credentials Manager</h3>

<i>Note: Click on the password to copy it.</i>

<div class="form-row">
    <div class="form-group col-md-6">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="margin-top:5px;" OnClick="@(() => ShowCredentialsModal())">Add New</MudButton>
    </div>
</div>

<div id="cover-spin" style="display:none"></div>


<MudTable Loading="@(credentialsList == null)" LoadingProgressColor="Color.Info" Items="@credentialsList" 
Hover="true" Bordered="true" Striped="@true" Filter="new Func<Credential, bool>(FilterFunc1)"
          CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered"
    @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Credentials</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
        IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTHeadRow Class="header-centered">
            <MudTh colspan="2"></MudTh>
            <MudTh colspan="2" Style="text-align:center">Development</MudTh>
            <MudTh colspan="2" Style="text-align:center">Staging</MudTh>
            <MudTh colspan="2"></MudTh>
        </MudTHeadRow>
        <MudTHeadRow>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.Name)">Module</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.IntegrationName)">Integration</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.DevUsername)">Username</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.DevPassword)">Password</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.StagingUsername)">Username</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.StagingPassword)">Password</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Credential, object>(x=>x.LastUpdated)">Last updated</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Integration Name">@context.IntegrationName</MudTd>
            <MudTd DataLabel="Dev Username">@context.DevUsername</MudTd>
            <MudTd @onclick="@(async () => await CopyPassword(context.DevPassword))" style="cursor: pointer;">*********</MudTd>
            <MudTd DataLabel="Staging username">@context.StagingUsername</MudTd>
            <MudTd @onclick="@(async () => await CopyPassword(context.StagingPassword))" style="cursor: pointer;">*********</MudTd>
            <MudTd DataLabel="Last Updated">@context.LastUpdated</MudTd>
            <MudTh>
                <div class="btn-group">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Secondary"
                                   Size="Size.Small" Class="mr-1" OnClick="@(() => ShowCredentialsUpdateModal(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error"
                                   Size="Size.Small" OnClick="@(e => ShowAuthenticationModal(context.Id))" />
                </div>
                </MudTh>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


@if (credentialsList == null)
{
    <p>Loading...</p>
}
else
{
    <div class="modal" tabindex="-1" role="dialog" style="display: @((showAuthenticationModel) ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Authentication</h5>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="HideAuthenticationModal" />
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label>Username:</label>
                            <input type="text" class="form-control" @bind="username">
                        </div>
                        <div class="form-group">
                            <label>Password:</label>
                            <input type="password" class="form-control" @bind="password">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Authenticate">Authenticate</MudButton> @* data-dismiss *@
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HideAuthenticationModal">Close</MudButton>

                </div>
            </div>
        </div>
    </div>
}
@code {
    private Credential[]? credentialsList;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private string? BASE_URL;
    private bool showAuthenticationModel;
    private string username, password, idToDelete;
    private string searchString1 = string.Empty;
    private Credential selectedItem1 = null;

    protected override async Task OnInitializedAsync()
    {
        BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
        try
        {
            await GetMyCredentials();
            await JS.InvokeVoidAsync("dataTable", "deploymentTable");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "Request failed", e.Message);
        }
    }

    private async Task GetMyCredentials()
    {
        string BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
        credentialsList = await Http.GetFromJsonAsync<Credential[]>(BASE_URL + "/credentials-manager");
    }

    private async Task ShowCredentialsModal()
    {
        var credentialsModal = Modal.Show<CredentialsManagerModal>
            ("Add Credentials", new ModalOptions()
                {
                    HideCloseButton = false,
                    HideHeader = false,
                    DisableBackgroundCancel = true,
                    ActivateFocusTrap = false,
                    Size = ModalSize.Large,
                    Position = ModalPosition.Middle

                });

        var result = await credentialsModal.Result;

        try
        {
            var newCredential = new Credential();
            dynamic _modalData = result?.Data;

            if (_modalData != null)
            {
                newCredential.Name = _modalData.Name;
                newCredential.DevUsername = _modalData.DevUsername;
                newCredential.DevPassword = _modalData.DevPassword;
                newCredential.StagingUsername = _modalData.StagingUsername;
                newCredential.StagingPassword = _modalData.StagingPassword;
                newCredential.IntegrationName = _modalData.IntegrationName;
                newCredential.OriginCountry = _modalData.OriginCountry;

                if (result != null && result.Confirmed)
                {
                    AddCredentials(newCredential);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Error!", ex.Message);
        }
        finally
        {
            credentialsModal.Close();
        }
    }

    private async void AddCredentials(Credential credential)
    {
        var endpoint = BASE_URL + "/credentials-manager";

        try
        {
            var client = new HttpClient();
            var response = await client.PostAsJsonAsync(endpoint, credential);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("successMessageModal", "Credentials added!");
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetMyCredentials();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to add credentials.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to add credentials.", ex.Message);
        }
    }

    private async void DeleteCredentials(string id)
    {
        var endpoint = BASE_URL + "/credentials-manager/" + id;

        try
        {
            var client = new HttpClient();

            var response = await client.DeleteAsync(endpoint);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetMyCredentials();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
                await JS.InvokeVoidAsync("successMessageModal", "Credentials removed!");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to remove credentials.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to remove credentials.", ex.Message);
        }
    }

    private async Task ShowCredentialsUpdateModal(Credential currentCredential)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(UpdateCredentialsManagerModal.name), currentCredential.Name);
        parameters.Add(nameof(UpdateCredentialsManagerModal.devUsername), currentCredential.DevUsername);
        parameters.Add(nameof(UpdateCredentialsManagerModal.devPassword), currentCredential.DevPassword);
        parameters.Add(nameof(UpdateCredentialsManagerModal.stagingUsername), currentCredential.StagingUsername);
        parameters.Add(nameof(UpdateCredentialsManagerModal.stagingPassword), currentCredential.StagingPassword);
        parameters.Add(nameof(UpdateCredentialsManagerModal.integrationName), currentCredential.IntegrationName);
        parameters.Add(nameof(UpdateCredentialsManagerModal.originCountry), currentCredential.OriginCountry);

        var modalOptions = new ModalOptions()
            {
                HideCloseButton = false,
                HideHeader = false,
                DisableBackgroundCancel = true,
                ActivateFocusTrap = false,
                Size = ModalSize.Large,
                Position = ModalPosition.Middle
            };

        var credentialsModal = Modal.Show<UpdateCredentialsManagerModal>
            ("Update Credentials", parameters, modalOptions);

        var result = await credentialsModal.Result;

        try
        {
            var newCredential = new Credential();
            dynamic _modalData = result?.Data;

            if (_modalData != null)
            {
                newCredential.Name = GetNonNullString(_modalData.Name, currentCredential.Name);
                newCredential.DevUsername = GetNonNullString(_modalData.DevUsername, currentCredential.DevUsername);
                newCredential.DevPassword = GetNonNullString(_modalData.DevPassword, currentCredential.DevPassword);
                newCredential.StagingUsername = GetNonNullString(_modalData.StagingUsername, currentCredential.StagingUsername);
                newCredential.StagingPassword = GetNonNullString(_modalData.StagingPassword, currentCredential.StagingPassword);
                newCredential.IntegrationName = GetNonNullString(_modalData.IntegrationName, currentCredential.IntegrationName);
                newCredential.OriginCountry = GetNonNullString(_modalData.OriginCountry, currentCredential.OriginCountry);

                if (result != null && result.Confirmed)
                {
                    UpdateCredentials(currentCredential.Id, newCredential);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Error!", ex.Message);
        }
        finally
        {
            credentialsModal.Close();
        }
    }

    private async void UpdateCredentials(string id, Credential credential)
    {
        var endpoint = BASE_URL + "/credentials-manager/" + id;

        try
        {
            var client = new HttpClient();
            var response = await client.PutAsJsonAsync(endpoint, credential);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetMyCredentials();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
                await JS.InvokeVoidAsync("successMessageModal", "Credentials updated!");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to update credentials.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to update credentials", ex.Message);
        }
    }

    private string GetNonNullString(string s1, string s2)
    {
        return String.IsNullOrEmpty(s1) ? s2 : s1;
    }

    private void ShowAuthenticationModal(string id)
    {
        showAuthenticationModel = true;
        idToDelete = id;
    }

    private void HideAuthenticationModal()
    {
        showAuthenticationModel = false;
        idToDelete = "";
    }

    private async Task<bool> Authenticate()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            await JS.InvokeVoidAsync("errorModal", "Require Credentials.");
        }

        if (username == "username" && password == "password")
        {
            DeleteCredentials(idToDelete);
            HideAuthenticationModal();
            return true;
        }
        else
        {
            await JS.InvokeVoidAsync("errorModal", "Invalid Credentials.");
        }

        return false;
    }

    private class Credential
    {
        public string? Id { get; set; }
        public string? IntegrationName { get; set; }
        public string? OriginCountry { get; set; }
        public string? Name { get; set; }
        public string? DevUsername { get; set; }
        public string? DevPassword { get; set; }
        public string? StagingUsername { get; set; }
        public string? StagingPassword { get; set; }
        public string? LastUpdated { get; set; }
    }

    private bool FilterFunc1(Credential element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Credential element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.IntegrationName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.StagingUsername.Contains(searchString))
            return true;
        if (element.DevUsername.Contains(searchString))
            return true;
        return false;
    }

    private async Task CopyPassword(string password)
    {
        await JS.InvokeVoidAsync("copyPassword", password);
    }
}