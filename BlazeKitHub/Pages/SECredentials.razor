@page "/se-credentials"
@inject IJSRuntime JS
@inject HttpClient Http
@inject IConfiguration Configuration
@using BlazeKitHub.Helpers

<h3>ShipEngine Credentials</h3>
<div class="form-row">
    <div class="form-group col-md-6">
        <button type="button" class="btn btn-primary" @onclick="@(() => ShowCredentialsModal())">Add New</button>
    </div>
</div>

<div id="cover-spin" style="display:none"></div>


@if (credentialsList == null)
{
    <p>Loading...</p>
}
else
{
    <div class="modal-body" style="font-size:small">
        <table class="table" id="deploymentTable">
            <thead>
                <tr>
                    <th>Module Name</th>
                    <th>Integration Name</th>
                    <th>Origin Country</th>
                    <th>SS Dev Username</th>
                    <th>SS Dev Password</th>
                    <th>Staging Username</th>
                    <th>Staging Password</th>
                    <th>Last updated</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var credential in credentialsList)
                {
                    <tr>
                        <td>@credential.Name</td>
                        <td>@credential.IntegrationName</td>
                        <td>@credential.OriginCountry</td>
                        <td>@credential.DevUsername</td>
                        <td>@credential.DevPassword</td>
                        <td>@credential.StagingUsername</td>
                        <td>@credential.StagingPassword</td>
                        <td>@credential.LastUpdated</td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-info" @onclick="@(() => ShowCredentialsUpdateModal(credential))"><i title="Edit" class="bi bi-pencil-fill" /></button>
                                <button type="button" class="btn btn-danger" @onclick="@(e => ShowAuthenticationModal(credential.Id))"><i title="Delete" class="bi bi-trash3-fill" /></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="modal" tabindex="-1" role="dialog" style="display: @((showAuthenticationModel) ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Authentication</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAuthenticationModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label>Username:</label>
                            <input type="text" class="form-control" @bind="username">
                        </div>
                        <div class="form-group">
                            <label>Password:</label>
                            <input type="password" class="form-control" @bind="password">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideAuthenticationModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="Authenticate">Authenticate</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private Credential[]? credentialsList;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private string? BASE_URL;
    private bool showAuthenticationModel;
    private string username, password, idToDelete;

    protected override async Task OnInitializedAsync()
    {
        BASE_URL = Configuration.GetSection("urls")["InternalSEApi"];
        try
        {
            await GetSECredentials();
            await JS.InvokeVoidAsync("dataTable", "deploymentTable");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "Request failed", e.Message);
        }
    }

    private async Task GetSECredentials()
    {
        string BASE_URL = Configuration.GetSection("urls")["InternalSEApi"];
        credentialsList = await Http.GetFromJsonAsync<Credential[]>(BASE_URL + "/se-credentials");
    }

    private async Task ShowCredentialsModal()
    {
        var credentialsModal = Modal.Show<SECredentialsModal>
            ("Add Credentials", new ModalOptions()
                {
                    HideCloseButton = false,
                    HideHeader = false,
                    DisableBackgroundCancel = true,
                    ActivateFocusTrap = false,
                    Size = ModalSize.Large

                });

        var result = await credentialsModal.Result;

        try
        {
            var newCredential = new Credential();
            dynamic _modalData = result?.Data;

            if (_modalData != null)
            {
                newCredential.Name = _modalData.Name;
                newCredential.DevUsername = _modalData.DevUsername;
                newCredential.DevPassword = _modalData.DevPassword;
                newCredential.StagingUsername = _modalData.StagingUsername;
                newCredential.StagingPassword = _modalData.StagingPassword;
                newCredential.IntegrationName = _modalData.IntegrationName;
                newCredential.OriginCountry = _modalData.OriginCountry;

                if (result != null && result.Confirmed)
                {
                    AddCredentials(newCredential);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Error!", ex.Message);
        }
        finally
        {
            credentialsModal.Close();
        }
    }

    private async void AddCredentials(Credential credential)
    {
        var endpoint = BASE_URL + "/se-credentials";

        try
        {
            var client = new HttpClient();
            var response = await client.PostAsJsonAsync(endpoint, credential);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("successMessageModal", "Credentials added!");
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetSECredentials();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to add credentials.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to add credentials.", ex.Message);
        }
    }

    private async void DeleteCredentials(string id)
    {
        var endpoint = BASE_URL + "/se-credentials/" + id;

        try
        {
            var client = new HttpClient();

            var response = await client.DeleteAsync(endpoint);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetSECredentials();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
                await JS.InvokeVoidAsync("successMessageModal", "Credentials removed!");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to remove credentials.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to remove credentials.", ex.Message);
        }
    }

    private async Task ShowCredentialsUpdateModal(Credential currentCredential)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(UpdateSECredentialsModal.name), currentCredential.Name);
        parameters.Add(nameof(UpdateSECredentialsModal.devUsername), currentCredential.DevUsername);
        parameters.Add(nameof(UpdateSECredentialsModal.devPassword), currentCredential.DevPassword);
        parameters.Add(nameof(UpdateSECredentialsModal.stagingUsername), currentCredential.StagingUsername);
        parameters.Add(nameof(UpdateSECredentialsModal.stagingPassword), currentCredential.StagingPassword);
        parameters.Add(nameof(UpdateSECredentialsModal.integrationName), currentCredential.IntegrationName);
        parameters.Add(nameof(UpdateSECredentialsModal.originCountry), currentCredential.OriginCountry);

        var modalOptions = new ModalOptions()
            {
                HideCloseButton = false,
                HideHeader = false,
                DisableBackgroundCancel = true,
                ActivateFocusTrap = false,
                Size = ModalSize.Large

            };

        var credentialsModal = Modal.Show<UpdateSECredentialsModal>
            ("Update Credentials", parameters, modalOptions);

        var result = await credentialsModal.Result;

        try
        {
            var newCredential = new Credential();
            dynamic _modalData = result?.Data;

            if (_modalData != null)
            {
                newCredential.Name = GetNonNullString(_modalData.Name, currentCredential.Name);
                newCredential.DevUsername = GetNonNullString(_modalData.DevUsername, currentCredential.DevUsername);
                newCredential.DevPassword = GetNonNullString(_modalData.DevPassword, currentCredential.DevPassword);
                newCredential.StagingUsername = GetNonNullString(_modalData.StagingUsername, currentCredential.StagingUsername);
                newCredential.StagingPassword = GetNonNullString(_modalData.StagingPassword, currentCredential.StagingPassword);
                newCredential.IntegrationName = GetNonNullString(_modalData.IntegrationName, currentCredential.IntegrationName);
                newCredential.OriginCountry = GetNonNullString(_modalData.OriginCountry, currentCredential.OriginCountry);

                if (result != null && result.Confirmed)
                {
                    UpdateCredentials(currentCredential.Id, newCredential);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Error!", ex.Message);
        }
        finally
        {
            credentialsModal.Close();
        }
    }

    private async void UpdateCredentials(string id, Credential credential)
    {
        var endpoint = BASE_URL + "/se-credentials/" + id;

        try
        {
            var client = new HttpClient();
            var response = await client.PutAsJsonAsync(endpoint, credential);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("destroyDataTable");
                await GetSECredentials();
                StateHasChanged();
                await JS.InvokeVoidAsync("dataTable");
                await JS.InvokeVoidAsync("successMessageModal", "Credentials updated!");
            }
            else
            {
                await JS.InvokeVoidAsync("errorModal", "Error!", "Unable to update credentials.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unable to update credentials", ex.Message);
        }
    }

    private string GetNonNullString(string s1, string s2)
    {
        return String.IsNullOrEmpty(s1) ? s2 : s1;
    }

    private void ShowAuthenticationModal(string id)
    {
        showAuthenticationModel = true;
        idToDelete = id; 
    }

    private void HideAuthenticationModal()
    {
        showAuthenticationModel = false;
        idToDelete = "";
    }

    private async Task<bool> Authenticate()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            await JS.InvokeVoidAsync("errorModal", "Require Credentials.");
        }

        if (username == "shipengine" && password == "sh!p")
        {
            DeleteCredentials(idToDelete);
            HideAuthenticationModal();
            return true;
        }
        else
        {
            await JS.InvokeVoidAsync("errorModal", "Invalid Credentials.");
        }

        return false;
    }

    private class Credential
    {
        public string? Id { get; set; }
        public string? IntegrationName { get; set; }
        public string? OriginCountry { get; set; }
        public string? Name { get; set; }
        public string? DevUsername { get; set; }
        public string? DevPassword { get; set; }
        public string? StagingUsername { get; set; }
        public string? StagingPassword { get; set; }
        public string? LastUpdated { get; set; }
    }
}