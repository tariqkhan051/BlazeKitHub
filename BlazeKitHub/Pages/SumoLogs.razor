@page "/sumo-logs"
@using System.Text
@using System.Text.RegularExpressions
@using System.Globalization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Reflection
@inject HttpClient Http
@inject IJSRuntime JS
@inherits Helpers.CheckBoxListBase
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime


<PageTitle>Sumo Logs</PageTitle>

<div class="modal-body">
    <div id="cover-spin" style="display:none"></div>
    <form method="dialog">
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="Name">Module Name</label>
                        <input type="text" class="form-control" @bind="selectedOption" @oninput="HandleInput" />

                        <ul class="list-group" style="display: @(showOptions ? "block" : "none"); position: absolute;z-index: 9999;max-height: 200px;overflow-y: auto; ">
                            @foreach (var option in filteredOptions)
                            {
                                <li class="list-group-item" style="background-color: white;" onmouseover="this.style.backgroundColor='grey';" onmouseout="this.style.backgroundColor='white';" @onclick="() => SelectOption(option)">@option</li>
                            }
                        </ul>

                    </div>
                    <div class="form-group col-md-6">
                        <label for="Environment">Environment*</label>
                        <select id="Environment" class="form-control form-select" name="Type" @bind="module.Environment">
                            <option value="Select">-Select-</option>
                            <option value="dev">Dev</option>
                            <option value="stage">Staging</option>
                            <option value="prod">Production</option>
                        </select>
                    </div>

                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        <label for="Name">Search Term</label>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Style="margin-top:2px" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>AddToList(addedScenarios, module?.UniqueName ?? string.Empty))" />
                        <input type="text" class="form-control" placeholder="18646" @bind:event="oninput" @bind="module.UniqueName" />
                    </div>

                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="Platform">Resource</label>
                        <select id="Platform" class="form-control form-select" name="Type" @bind="module.Resource">
                            <option value="Select">-Select-</option>
                        </select>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="Platform">Case</label>
                        <select id="Platform" class="form-control form-select" name="Case" @bind="module.Case">
                            <option value="Select">-Select-</option>
                            <option value="success">Success</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="From">From</label>
                        <input type="datetime-local" class="form-control" @bind="module.FromDate" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="To">To</label>
                        <input type="datetime-local" class="form-control" @bind="module.ToDate" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAuthenticationModel">Get Logs</MudButton>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <label for="Name">Query</label>
                    <textarea class="form-control" style="height:120px; resize: none; font-size: 12px;" readonly @bind="module.Result"> </textarea>
                </div>

                <div class="row">
                    <label for="SearchTerm">Search Term(s) added</label>
                    <div style="height:250px; overflow-y: scroll; overflow-x:scroll;">
                        <ul>
                            @foreach (var value in addedScenarios.ToArray())
                            {
                                <li style="list-style:none">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(()=>RemoveFromList(addedScenarios, value))" />@value
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <div class="form-row">
        <div class="form-group col-md-12">
            <table id="logsTable" class="mud-table-container">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Info</th>
                        <th style="width: 70%;">Logs</th>
                    </tr>
                </thead>
                <tbody>
                    @if (@logsResults.Count == 0)
                    {
                        <p>No records found...</p>
                    }
                    @foreach (var (log, index) in logsResults.Select((log, index) => (log, index)))
                    {
                        <tr>
                            <td>@(index + 1)</td>
                            <td>
                                <span>@log.DateTime</span>
                            </td>
                            <td style="max-height: 50px; overflow: auto; position: relative;">
                                @if (log.Message is not null)
                                {
                                    <pre class="jsonview">
                                    <span title="@log.Message.ToString()" data-toggle="modal" data-target="#parsedMapModal@(index)">
                                            @log.Message.ToString().Substring(0, Math.Min(50, @log.Message.ToString().Length))<i class="bi bi-arrows-collapse"></i>
                                                    </span>
                                                    </pre>

                                    <MudIconButton Icon="@Icons.Material.Filled.CopyAll" id="copy-to-clipboard" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() => CopyToClipboard(log.Message.ToString()))" Style="position: absolute; top: 0; right: 0;" />

                                    <div class="modal fade" id="parsedMapModal@(index)" tabindex="-1" role="dialog" aria-labelledby="parsedMapModalLabel@(index)" aria-hidden="true">
                                        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">

                                                    <h5 class="modal-title" id="parsedMapModalLabel@(index)">Logs</h5>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" Color="Color.Primary" class="close" Size="Size.Small" />
                                                    @*  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                            </button> *@
                                                </div>
                                                <div class="modal-body" style="height: 600px;overflow-y: scroll;">
                                                    <pre id="json-container" class="json-prettyprint" onchange="renderJSON(@log.Message)">@log.Message</pre>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <pre class="jsonview">No ParsedMap available</pre>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" style="display: @((showAuthenticationModel) ? "block" : "none"); margin-top: 10%">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Authentication</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAuthenticationModel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="idInput">Username:</label>
                        <input type="text" class="form-control" id="idInput" @bind="id">
                    </div>
                    <div class="form-group">
                        <label for="passInput">Password:</label>
                        <input type="password" class="form-control" id="passInput" @bind="pass">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HideAuthenticationModel" Class="mr-2">Close</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Authenticate">Authenticate</MudButton>

                @* <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideAuthenticationModel">Close</button> *@
            </div>
        </div>
    </div>
</div>

@code {
    private ModuleDetail module = new();
    List<LogsResult> logsResults = new();
    private List<string> addedScenarios = new();
    static bool? IsDisabled { get; set; } = true;
    private bool showAuthenticationModel;
    private string endpoint = string.Empty;
    private string scenario = string.Empty;
    private string id;
    private string pass;

    private string selectedOption;
    private List<string> options;
    private List<string> filteredOptions;
    private bool showOptions;

    protected override void OnInitialized()
    {
        options = new List<string>()
        {""};
        filteredOptions = options;
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var searchText = e.Value.ToString();

        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredOptions = options;
            showOptions = false;
        }
        else
        {
            filteredOptions = options.Where(o => o.Contains(searchText)).ToList();
            showOptions = true;
        }
    }

    private void SelectOption(string option)
    {
        selectedOption = option;
        module.Name = selectedOption;
        showOptions = false;
    }


    private async Task ShowAuthenticationModel()
    {
        //if( EnsureRequiredFieldsAreFilledOut())
        //{
        await GenerateQueryForView();
        showAuthenticationModel = true;
        //  }
    }

    private void HideAuthenticationModel()
    {
        showAuthenticationModel = false;
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("copyClipboard", text);
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(pass))
        {
            await JS.InvokeVoidAsync("errorModal", "Require Credentials.");
            return;
        }

        List<TeamData> teamData = JsonConvert.DeserializeObject<List<TeamData>>(json);
        User team = teamData.FirstOrDefault(t => t.team == id).user;

        if (id == team.username && pass == team.password)
        {
            HideAuthenticationModel();
            await JS.InvokeVoidAsync("showLoader");
            List<string> Quries = GenerateQuery();
            if (Quries.Count > 1)
            {
                await GetResults(Quries[0], Quries[1], id);
            }
            else
            {
                await GetResults(Quries[0], "", id);
            }
            await JS.InvokeVoidAsync("hideLoader");
        }
        else
        {
            await JS.InvokeVoidAsync("errorModal", "Invalid Credentials.");
        }
    }

    private async void AddToList(List<string> list, string val)
    {
        try
        {
            if (!string.IsNullOrEmpty(val) && !list.Contains(val))
            {
                list.Add(val);
                if (scenario.Equals(val))
                {
                    scenario = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unexpected error", ex.Message);
        }
    }

    private async void RemoveFromList(List<string> list, string val)
    {
        try
        {
            if (!string.IsNullOrEmpty(val) && list.Contains(val))
            {
                list.Remove(val);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Unexpected error", ex.Message);
        }
    }

    private async Task GetResults(string shipQuery, string carrierQuery, string teamName)
    {
        try
        {
            DateTime fromDate = module.FromDate;
            DateTime toDate = module.ToDate;
            EnsureValidDateRange(fromDate, toDate);
            string fromDateString = fromDate.AddHours(-5).ToString("yyyy-MM-ddTHH:mm:ss");
            string toDateString = toDate.AddHours(-5).ToString("yyyy-MM-ddTHH:mm:ss");
            var shipResults = await SearchSumoLogs(fromDateString, toDateString, shipQuery, teamName);
            logsResults = shipResults;
            if (!string.IsNullOrWhiteSpace(module.Resource) && module.Resource != "Select")
            {
                var carrierResults = await SearchSumoLogs(fromDateString, toDateString, carrierQuery, teamName);
                logsResults = shipResults.Concat(carrierResults).ToList();
            }
        }
        catch (Exception ex)
        {
            await ShowErrorModal("Error Occurred", ex.Message);
        }
    }

    private List<string> GenerateQuery()
    {

        List<string> quries = new List<string>();
        string uniqueName = GetUniqueNameClause();
        string sourceCategory = GetSourceCategoryClause();
        string logMessage = GetLogMessageClause();

        string shipQuery = GetShipQuery(uniqueName, sourceCategory, logMessage);
        quries.Add(shipQuery);
        if (!string.IsNullOrWhiteSpace(module.Resource) && module.Resource != "Select")
        {
            string carrierQuery = GetCarrierQuery(uniqueName, sourceCategory);
            quries.Add(carrierQuery);
        }
        return quries;
    }

    private bool EnsureRequiredFieldsAreFilledOut()
    {
        if (string.IsNullOrWhiteSpace(module.Name) ||
            string.IsNullOrWhiteSpace(module.Environment) ||
            module?.Environment == "Select")
        {
            JS.InvokeVoidAsync("errorModal", "Please fill out required fields.");
            return false;
        }

        if (string.IsNullOrWhiteSpace(module.Platform) ||
            module?.Platform == "Select")
        {
            JS.InvokeVoidAsync("errorModal", "Please fill out required fields.");
            return false;
        }

        return true;
    }


    private void EnsureValidDateRange(DateTime fromDate, DateTime toDate)
    {
        if (fromDate.Date > toDate.Date || (fromDate.Date == toDate.Date && fromDate.TimeOfDay > toDate.TimeOfDay))
        {
            throw new ArgumentException("Invalid date range: From date must be earlier than or equal to To date.");
        }
    }

    private string GetUniqueNameClause()
    {
        string result = "";
        if (addedScenarios.Count > 1)
        {
            foreach (var searchTerm in addedScenarios)
            {
                result += $"(\\\"{searchTerm}\\\") AND ";
            }
            result = result.TrimEnd(' ', 'A', 'N', 'D');
        }
        else if (addedScenarios.Count == 1)
        {
            result = $"(\\\"{addedScenarios[0]}\\\")";
        }
        else
        {
            result = $"(\\\"{module.UniqueName}\\\")";
        }
        return result;
    }

    private string GetSourceCategoryClause()
    {
        if (!string.IsNullOrWhiteSpace(selectedOption) && !string.IsNullOrWhiteSpace(module.Environment))
        {
            return $"kubernetes/{ConvertSpacesAndUnderscores(selectedOption)}/{module.Environment}/{ConvertSpacesAndUnderscores(selectedOption)}/{module.Environment}/deploy\\\"";
        }

        return string.Empty;
    }

    private string GetLogMessageClause()
    {
        return $"{module.Resource}";
    }

    private string GetShipQuery(string uniqueName, string sourceCategory, string logMessage)
    {
        string query = "";
        string pattern = "[a-zA-Z0-9]";
        bool isSearchTerm = Regex.IsMatch(uniqueName, pattern);
        if (isSearchTerm)
        {
            query = uniqueName;
        }

        string code = module.Case != null && module.Case.Equals("success") ? " returned 200" : "";

        if (!string.IsNullOrEmpty(sourceCategory))
        {
            if (isSearchTerm)
            {
                query += " AND ";
            }
            query += $" _sourceCategory=\\\"{sourceCategory}";
        }

        if (!string.IsNullOrEmpty(logMessage))
        {
            if (!string.IsNullOrEmpty(query))
            {
                query += "| ";
            }

            query += $"json field=_raw \\\"log.message\\\" | where %\\\"log.message\\\" contains \\\"HTTP POST /{logMessage}{code}\\\"";
        }

        return query;
    }

    private string GetCarrierQuery(string uniqueName, string sourceCategory)
    {
        string query = "";
        string pattern = "[a-zA-Z0-9]";
        bool isSearchTerm = Regex.IsMatch(uniqueName, pattern);
        if (isSearchTerm)
        {
            query = uniqueName;
        }

        if (!string.IsNullOrEmpty(sourceCategory))
        {
            if (isSearchTerm)
            {
                query += " AND ";
            }
            query += $"_sourceCategory=\\\"{sourceCategory} |";
        }

        query += $" json field = _raw \\\"log.level\\\" | where %\\\"log.level\\\" = \\\"debug\\\" | json field = _raw \\\"log.message\\\" | where %\\\"log.message\\\" = \\\"Outbound HTTP Request&Response\\\"";

        return query;
    }

    private async Task ShowErrorModal(string title, string message)
    {
        await JS.InvokeVoidAsync("errorModal", title, message);
    }

    public async Task<List<LogsResult>> SearchSumoLogs(string from, string to, string query, string team)
    {
        string? BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
        string endpointUrl = BASE_URL + "/sumoLogs/search";
        //string endpointUrl = "http://localhost:5469/api/sumoLogs/search";
        string requestBody = $@"{{
            ""from"" : ""{from}"",
            ""to"" : ""{to}"",
            ""query"" : ""{query}"",
            ""team"" : ""{team}""
        }}";

        using var client = new HttpClient();

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                RequestUri = new Uri(endpointUrl),
                Content = new StringContent(requestBody, System.Text.Encoding.UTF8, "application/json")
            };

        using var response = await client.SendAsync(request);

        response.EnsureSuccessStatusCode();

        string responseBody = await response.Content.ReadAsStringAsync();
        JObject obj = JObject.Parse(responseBody);
        JArray messages = (JArray)obj["messages"];

        List<LogsResult> results = new List<LogsResult>();

        foreach (JObject message in messages)
        {
            if (message != null)
            {
                string? messageText = string.Empty;
                DateTime? datetime = new DateTime();
                if (message["parsedMap"] is JObject && message["parsedMap"] != null)
                {
                    JObject parsedMap = (JObject)message["parsedMap"];
                    messageText = Convert.ToString(parsedMap);
                }
                else
                {
                    messageText = Convert.ToString(message);
                }

                if (message["datetime"] != null)
                {
                    datetime = DateTime.ParseExact(message["datetime"].ToString(), "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture);
                }

                LogsResult result = new LogsResult
                    {
                        Message = messageText,
                        //ParsedMap = parsedMap,
                        DateTime = datetime,
                    };

                results.Add(result);
            }
        }
        return results;
    }

    static string ConvertToDesiredFormat(string input)
    {
        // Replace occurrences of "\\\"" with "\""
        input = input.Replace("\\\\\"", "\"");

        // Replace occurrences of "u" with "\\u"
        input = input.Replace("u", "\\u");

        return input;
    }

    private async Task GenerateQueryForView()
    {
        try
        {
            List<string> queries = GenerateQuery();
            string queryResult = string.Join(Environment.NewLine, queries.Select(q => q.Replace("\\\"", "\"").Replace("\\", "")));
            if (queryResult.Contains("u003e"))
            {
                queryResult = ConvertToDesiredFormat(queries[0]);
            }
            if (queries.Count > 1)
            {
                queryResult = "-1-" + Environment.NewLine + queries[0].Replace("\\\"", "\"").Replace("\\", "") + Environment.NewLine + Environment.NewLine + Environment.NewLine;
                queryResult += "-Carrier-" + Environment.NewLine + queries[1].Replace("\\\"", "\"").Replace("\\", "");
            }
            module.Result = queryResult;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("errorModal", "Error Occurred", ex.Message);
        }
    }



    public string ConvertSpacesAndUnderscores(string input)
    {
        string pattern = @"[_\-\s]+";
        string replacement = "/";
        string output = Regex.Replace(input, pattern, replacement);
        return output;
    }

    public class ModuleDetail
    {
        public string? Name { get; set; }
        public string? UniqueName { get; set; }
        public string? Environment { get; set; }
        public string? Platform { get; set; }
        public string? Resource { get; set; }
        public string? Result { get; set; }
        public string? Case { get; set; }
        public DateTime FromDate { get; set; } = DateTime.Now.AddMinutes(-15);
        public DateTime ToDate { get; set; } = DateTime.Now;
    }

    public class LogsResult
    {
        public string? Message { get; set; }
        public string? Enviornment { get; set; }
        //public JObject? ParsedMap { get; set; }
        public DateTime? DateTime { get; set; }
    }

    class User
    {
        public string username { get; set; }
        public string password { get; set; }
    }

    class TeamData
    {
        public string team { get; set; }
        public User user { get; set; }
    }

    private string json = @"[
        {
            ""team"": ""mustangs"",
            ""user"": {
                ""username"": ""mustangs"",
                ""password"": """"
            }
        },
        {
            ""team"": ""sherlock"",
            ""user"": {
                ""username"": ""sherlock"",
                ""password"": """"
            }
        },
        {
            ""team"": ""cyborg"",
            ""user"": {
                ""username"": ""cyborg"",
                ""password"": """"
            }
        },
        {
            ""team"": ""daredevil"",
            ""user"": {
                ""username"": ""daredevil"",
                ""password"": """"
            }
        },
        {
            ""team"": ""falcons"",
            ""user"": {
                ""username"": ""falcons"",
                ""password"": """"
            }
        }
    ]";
}