@page "/info"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@inject IConfiguration Configuration

<PageTitle>API Details</PageTitle>

<h3>API Details</h3>

@if (infoData == null)
{
    <p>Loading...</p>
}
else
{
    <div class="modal-body">
        @if (!string.IsNullOrEmpty(apiDetailToShow))
        {
            <ApiInfo InfoFile=@apiDetailToShow></ApiInfo>
            <div align="right"><button class="btn btn-primary" style="margin-top:5px" @onclick="@(() => apiDetailToShow = string.Empty)">Back</button></div>
        }
        else
        {
            <div>
                <table class="table" id="deploymentTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th style="text-align:center">Status</th>
                            <th>Details</th>
                            <th style="text-align:center">Info</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var data in infoData)
                        {
                            <tr>
                                @switch (data.Name)
                                {
                                    case "samples-generator":
                                        urlValue = @SAMPLES_GENERATOR_URL;
                                        break;
                                    case "address-generator":
                                        urlValue = @ADDRESS_GENERATOR_URL;
                                        break;
                                    case "module-generator":
                                        urlValue = @MODULE_GENERATOR_URL;
                                        break;
                                    case "performance-calculator":
                                        urlValue = @PERF_URL;
                                        break;
                                    case "sumo-logs-api":
                                        urlValue = @SUMO_LOGS_URL;
                                        break;
                                    default:
                                        urlValue = string.Empty;
                                        break;
                                }
                                <td><a href=@urlValue title=@urlValue target=" _blank">@data.Name</a></td>
                                @if (data.Status == "Active")
                                {
                                    <td style="text-align:center"><i title="Active" class="fas fa-check-circle" style="color: green;" /></td>
                                }
                                else
                                {
                                    <td style="text-align:center"><i title="Inactive" class="fas fa-times-circle" style="color: red;" /></td>
                                }
                                <td>@data.Details</td>
                                <td style="text-align:center"><button class="btn" @onclick="@(() => apiDetailToShow = @data.Name)"><i class="bi bi-info-circle-fill"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@code {
    private SEInfo[]? infoData;
    private string? BASE_URL, PERF_URL, ADDRESS_GENERATOR_URL, MODULE_GENERATOR_URL, SAMPLES_GENERATOR_URL, SUMO_LOGS_URL;
    private string urlValue = string.Empty, apiDetailToShow = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetInfo();
            PERF_URL = BASE_URL + "/perf";
            ADDRESS_GENERATOR_URL = BASE_URL + "/address";
            MODULE_GENERATOR_URL = BASE_URL + "/module-generator";
            SAMPLES_GENERATOR_URL = BASE_URL + "/samples";
            SUMO_LOGS_URL = BASE_URL + "/sumoLogs";
            await JS.InvokeVoidAsync("dataTable", "deploymentTable");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "Request failed", e.Message);
        }
    }

    private async Task GetInfo()
    {
        BASE_URL = Configuration.GetSection("urls")["InternalSEApi"];
        infoData = await Http.GetFromJsonAsync<SEInfo[]>(BASE_URL + "/info");
    }

    public class SEInfo
    {
        public string Name { get; set; } = string.Empty;

        public string Status { get; set; } = string.Empty;

        public string Details { get; set; } = string.Empty;
    }
}
