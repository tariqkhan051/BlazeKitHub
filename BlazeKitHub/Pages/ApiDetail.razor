@page "/info"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@inject IConfiguration Configuration

<PageTitle>API Details</PageTitle>

<h3>API Details</h3>

@if (!string.IsNullOrEmpty(apiDetailToShow))
{
    <ApiInfo InfoFile=@apiDetailToShow></ApiInfo>
    <div align="right"><MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin-top:5px" OnClick="@(() => apiDetailToShow = string.Empty)">Back</MudButton></div>
}
else
{
    <MudTable Loading="@(infoData == null)" LoadingProgressColor="Color.Info"
              Items="@infoData" Striped="true" Filter="new Func<APIDetail, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">APIs Details</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                          Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Details</MudTh>
            <MudTh>Info</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudLink Href=@GetUrlValue(context.Name) title=@GetUrlValue(context.Name) target="_blank">
                    @context.Name
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Sign">
                <MudIcon Icon="@(IsStatusActive(context.Status) ? @Icons.Material.Rounded.CheckCircle : @Icons.Material.Rounded.RemoveCircle)"
                         Color="(IsStatusActive(context.Status) ? Color.Success : Color.Error)" />
            </MudTd>
            <MudTd DataLabel="Details">@context.Details</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Rounded.Info" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                   OnClick="@(() => apiDetailToShow = context.Name)" />
                </MudTd>
            </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private APIDetail[]? infoData;
    private string? BASE_URL, PERF_URL, ADDRESS_GENERATOR_URL, CODE_GENERATOR_URL, SAMPLES_GENERATOR_URL, SUMO_LOGIC_URL;
    private string urlValue = string.Empty, apiDetailToShow = string.Empty;
    private string searchString1 = string.Empty;
    private APIDetail selectedItem1 = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetInfo();
            PERF_URL = BASE_URL + "/perf";
            ADDRESS_GENERATOR_URL = BASE_URL + "/address";
            CODE_GENERATOR_URL = BASE_URL + "/code-generator";
            SAMPLES_GENERATOR_URL = BASE_URL + "/samples";
            SUMO_LOGIC_URL = BASE_URL + "/sumoLogs";
            await JS.InvokeVoidAsync("dataTable", "deploymentTable");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("errorModal", "Request failed", e.Message);
        }
    }

    private async Task GetInfo()
    {
        BASE_URL = Configuration.GetSection("urls")["BlazeKitHubApi"];
        infoData = await Http.GetFromJsonAsync<APIDetail[]>(BASE_URL + "/info");
    }

    private bool IsStatusActive(string status)
    {
        return status == "Active";
    }
    private string GetUrlValue(string apiName)
    {
        switch (apiName)
        {
            case "samples-generator":
                urlValue = SAMPLES_GENERATOR_URL;
                break;
            case "address-generator":
                urlValue = ADDRESS_GENERATOR_URL;
                break;
            case "code-generator":
                urlValue = CODE_GENERATOR_URL;
                break;
            case "performance-calculator":
                urlValue = PERF_URL;
                break;
            case "sumo-logic-api":
                urlValue = SUMO_LOGIC_URL;
                break;
            default:
                urlValue = string.Empty;
                break;
        }

        return urlValue;
    }
    private bool FilterFunc1(APIDetail element) => FilterFunc(element, searchString1);
    private bool FilterFunc(APIDetail element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Details.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public class APIDetail
    {
        public string Name { get; set; } = string.Empty;

        public string Status { get; set; } = string.Empty;

        public string Details { get; set; } = string.Empty;
    }
}
